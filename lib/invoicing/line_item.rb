# frozen_string_literal: true

require "active_support/concern"

module Invoicing
  module LineItem
    extend ActiveSupport::Concern

    module ActMethods
      def acts_as_line_item(*args)
        Invoicing::ClassInfo.acts_as(Invoicing::LineItem, self, args)

        info = line_item_class_info
        if info.previous_info.nil? # Called for the first time?
          # Set the 'amount' columns to act as currency values
          acts_as_currency_value(info.method(:net_amount), info.method(:tax_amount))
        end
      end
    end

    included do
      before_validation :calculate_tax_amount
    end

    # Overrides the default constructor of <tt>ActiveRecord::Base</tt> when +acts_as_line_item+
    # is called. If the +uuid+ gem is installed, this constructor creates a new UUID and assigns
    # it to the +uuid+ property when a new line item model object is created.
    def initialize(*args)
      super
      # Initialise uuid attribute if possible
      info = line_item_class_info
      if self.has_attribute?(info.method(:uuid)) && info.uuid_generator
        write_attribute(info.method(:uuid), info.uuid_generator.generate)
      end
    end

    # Returns the currency code of the ledger item to which this line item belongs.
    def currency
      ledger_item = line_item_class_info.get(self, :ledger_item)
      raise RuntimeError, 'Cannot determine currency for line item without a ledger item' if ledger_item.nil?
      ledger_item.send(:ledger_item_class_info).get(ledger_item, :currency)
    end

    def calculate_tax_amount
      return unless respond_to? :net_amount_taxed
      self.tax_amount = net_amount_taxed - net_amount
    end

    # The sum of +net_amount+ and +tax_amount+.
    def gross_amount
      net_amount = line_item_class_info.get(self, :net_amount)
      tax_amount = line_item_class_info.get(self, :tax_amount)
      (net_amount && tax_amount) ? (net_amount + tax_amount) : nil
    end

    # +gross_amount+ formatted in human-readable form using the line item's currency.
    def gross_amount_formatted
      format_currency_value(gross_amount)
    end

    # Stores state in the ActiveRecord class object
    class ClassInfo < Invoicing::ClassInfo::Base #:nodoc:
      attr_reader :uuid_generator

      def initialize(model_class, previous_info, args)
        super

        begin # try to load the UUID gem
          require 'uuid'
          @uuid_generator = UUID.new
        rescue LoadError, NameError # silently ignore if gem not found
          @uuid_generator = nil
        end
      end

      # Allow methods generated by +CurrencyValue+ to be renamed as well
      def method(name)
        if name.to_s =~ /^(.*)_formatted$/
          "#{super($1)}_formatted"
        else
          super
        end
      end
    end
  end
end
